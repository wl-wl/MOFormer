"""
代码中，我们使用了scikit-learn库中的KMeans聚类算法，将前沿数据分为若干个聚类。
然后，对于每个聚类，计算其中心点与其最近的数据点的距离，将这些距离从小到大排序，
选取前k个距离最大的点作为Knee Point。在实际应用中，您可以根据具体情况调整参数，
例如聚类数量、选取的Knee Point数量等。
在Hypervolume(hso)求解到的前沿中，Knee Point是指前沿曲线上的一个拐点，通常表示为前沿曲线上的一个局部最优解。

求解Knee Point的方法有很多种，以下是一些常用的方法：

基于距离的方法：该方法基于前沿曲线上每个点与前沿曲线两端点的距离，计算每个点的拐率。当拐率达到最大值时，即可判定该点为Knee Point。

基于密度的方法：该方法基于前沿曲线上每个点周围的点密度，计算每个点的密度与距离的乘积。当该值达到最大值时，即可判定该点为Knee Point。

基于聚类的方法：该方法基于前沿曲线上每个点周围的点聚类情况，将前沿曲线分为若干个聚类，找到聚类之间的转折点即为Knee Point。

以上方法都是基于前沿曲线上的点进行计算，可以根据实际情况选择合适的方法来求解Knee Point。如果您有其他问题，欢迎继续提问哦。

"""

from sklearn.cluster import KMeans
import numpy as np
import matplotlib.pyplot as plt
import math
from kneed import DataGenerator, KneeLocator
# 假设前沿数据存储在frontier中，每个点有两个目标函数值
#基于距离的方法


points=[]
#第一前沿
sequence_index=[345, 349, 1573, 1791, 2141, 2550, 2924, 3340, 3414, 3415, 3785, 4068, 4240]
point_x=[-0.0131,  -0.5689,  -0.2547,  -0.335 ,   1.4833 , -0.9865 , -0.1862,  -0.3146,  -0.3118,
  1.6231,  -0.4509 , -0.7384 ,  1.0781]
point_y=[0.1132,  0.3192,  0.1933,  0.2714,  0.0669,  0.4176 , 0.1768 , 0.2467,  0.2317 , 0.0442,
 0.2851,  0.3377,  0.0941]
# KNEE:[-0.7384, -0.3118, -0.2547, -0.0131] [0.3377, 0.2317, 0.1933, 0.1132]

#第二前沿
# sequence_index=[315, 330, 373, 387, 507, 641, 685, 759, 917, 1013, 1541, 1599, 1801, 1829, 1925, 2073, 2595, 2597, 2967, 3396, 3638, 3689, 4158]
# point_x=[ 1.2418,  -0.2891,   2.4679 ,  0.083  ,  1.5295 , -0.7446  , 2.2791,  -0.6623,  -0.3302,
#  -0.2368 ,  0.4538,  -0.7157 ,  0.0237,   0.0962,  -0.415 ,   1.5881 ,  0.7833 , -0.787,
#  -0.3575 , -0.3989 , -0.362 ,  -0.8272,  -0.1489]
# point_y=[0.1077,  0.2728,  0.0576,  0.1875,  0.1014 , 0.5548,  0.0932,  0.3613 , 0.2794,  0.2111,
#  0.1138,  0.3685 , 0.1896,  0.1412,  0.3572,  0.0976,  0.1134,  0.6076 , 0.2956,  0.3449,
#  0.298 ,  0.9481 , 0.1941]
#KNEE [-0.787, -0.7157, -0.2368, 0.0962] [0.6076, 0.3685, 0.2111, 0.1412]


# # #第三前沿
# sequence_index=[0, 55, 91, 206, 540, 787, 799, 831, 1021, 1104, 1108, 1264, 1306, 1796, 1811, 1940, 2110, 2447, 2572, 2753, 3116, 3358, 3395, 3836, 3886, 3903, 4095]
# point_x=[-0.3443,  -0.4187 ,  3.0366 ,  0.4877 , -0.7113 , -0.1819 ,  1.637,    1.3637 , -0.388,
#   2.5993 ,  0.806,   -0.0906 , -0.7779 , -0.1324  , 0.1974 , -0.6281,  -0.3296,  -0.6932,
#  -0.6834 , -0.2832 ,  2.3386 ,  0.2699,   0.8826,  -0.6644 , -0.5224 , -0.4556,  -0.2946]
# point_y=[0.3551 , 0.3659 , 0.0896 , 0.1436 , 0.8011,  0.2832 , 0.0994 , 0.1224,  0.3567 , 0.0928,
#  0.136  , 0.2142 , 0.8147,  0.2217,  0.1914,  0.3944,  0.3312 , 0.7275,  0.4378 , 0.2863,
#  0.0987,  0.1564 , 0.1225,  0.4154,  0.3784,  0.3771 , 0.3232]

#KNEE [-0.6834, -0.3296, -0.2832, -0.1324] [0.4378, 0.3312, 0.2863, 0.2217]

# # #第四前沿
# sequence_index=[19, 148, 318, 792, 861, 936, 1171, 1208, 1261, 1490, 1529, 1596, 1597, 1651, 1752, 1755, 1972, 2029, 2081, 2617, 2623, 2908, 2918, 3366, 3513, 3593, 3742, 4002, 4035, 4135]
# point_x=[-0.3208,   2.7782 ,  0.6579 ,  1.1226 ,  1.8001 ,  0.9595,   0.0407 , -0.7547 , -0.3627,
#   1.3702 , -0.0133 ,  0.2777  , 1.261  ,  0.6399 ,  0.643,  -0.6813 ,  1.9905 ,  0.3858,
#   0.163 ,  -0.6629 , -0.2329,  -0.6862,  -0.5158,  -0.612  , -0.4707 ,  0.5021 , -0.0784,
#  -0.2783 ,  0.3287,  -0.2322]
# point_y=[0.3669 , 0.0957,  0.1535,  0.1419,  0.1187 , 0.1519 , 0.2195,  0.8182,  0.3682,  0.1226,
#  0.2222 , 0.2012,  0.1414,  0.1584,  0.1569,  0.461 ,  0.1006 , 0.1645 , 0.2177,  0.4161,
#  0.3376 , 0.7695,  0.3999,  0.4038,  0.3826,  0.161 ,  0.2315,  0.3585 , 0.1994 , 0.2977]

#KNEE [-0.6813, -0.6629, -0.2322, -0.0784, 0.3858] [0.461, 0.4161, 0.2977, 0.2315, 0.1645]

# print(len(sequence_index),len(point_x),len(point_y))
# #第五前沿
# sequence_index=[68, 126, 210, 336, 344, 354, 392, 439, 452, 625, 650, 746, 813, 971, 1075, 1355, 1357, 1512, 1633, 2053, 2254, 2298, 2393, 2461, 2512, 2588, 2700, 2808, 3232, 3435, 3531, 3677, 3721, 3727, 3871, 4223]
# point_x=[ 0.9949,  -0.6565,   2.7196 , -0.7163,   2.0998 ,  0.1018 ,  0.6766,  -0.2032,  -0.2344,
#   0.4587 ,  0.4429,  -0.0302,   0.0424 ,  0.286 ,   1.234 ,  -0.0389 , -0.5893 , -0.1958,
#   0.1955,  -0.4587 ,  1.5292,  -0.2385,   2.663  ,  0.54  ,  -0.1994,   1.3122 ,  1.9905,
#  -0.0476 , -0.3001 ,  1.5488 ,  1.3769 , -0.6632 , -0.3219  , 1.2176 ,  1.4795 , -0.6583]
# point_y=[0.1557,  0.4491,  0.1115,  0.8607 , 0.1196,  0.2283,  0.1803,  0.3586 , 0.3769,  0.2034,
#  0.2048,  0.2527 , 0.2521,  0.2103,  0.148 ,  0.2784 , 0.4079 , 0.2998,  0.2239 , 0.4047,
#  0.1313,  0.3791,  0.1155,  0.1924,  0.3062,  0.1465,  0.1213 , 0.2965,  0.3833 , 0.1292,
#  0.1362,  0.7632,  0.3847,  0.1528 , 0.1317 , 0.6607]
#KNEE [-0.6565, -0.5893, -0.1994, -0.1958, -0.0302] [0.4491, 0.4079, 0.3062, 0.2998, 0.2527]

#第六前沿
# sequence_index=[74, 194, 222, 233, 465, 492, 622, 661, 770, 1160, 1229, 1263, 1283, 1298, 1367, 1589, 1742, 1810, 1933, 2046, 2132, 2157, 2184, 2339, 2471, 2575, 2578, 2591, 2643, 2707, 2708, 2813, 2849, 2920, 3221, 3266, 3656, 3854, 4037, 4105]
# point_x=[ 0.4273,  1.3966, -0.335 ,  1.3981 , 0.7968,  0.1216 , 0.6109,  0.624 , -0.5661,
#   2.7376 , 0.2749 , 1.0647 , 2.2696, -0.6835,  1.1072 ,-0.384 , -0.3098 , 0.0125,
#  -0.577 , -0.6555 , 1.291 ,  1.1368 ,-0.6277, -0.6616 , 1.6404 , 0.9277 , 1.3667,
#  -0.021  , 0.0236 , 1.195  , 0.1093 ,-0.1988 , 1.5967, -0.4481 , 1.1483 , 1.3321,
#   2.0407, -0.239  , 0.1639 , 0.3912]
# point_y=[0.2155 ,0.1491, 0.4062, 0.1438 ,0.2012, 0.2414, 0.2104, 0.2029 ,0.4128 ,0.113,
#  0.2352, 0.1889 ,0.1294, 0.9131 ,0.1863 ,0.4083 ,0.3881, 0.2713 ,0.4488, 0.5741,
#  0.1581, 0.1849 ,0.4556 ,0.844  ,0.1319 ,0.1939, 0.1515, 0.283  ,0.2625, 0.1667,
#  0.2598, 0.3096, 0.132 , 0.4096 ,0.1735, 0.1523, 0.1305, 0.3847 ,0.2392 ,0.2319]
#KNEE [-0.6277, -0.5661, -0.1988, 0.1216, 1.3981] [0.4556, 0.4128, 0.3096, 0.2414, 0.1438]


# #第七前沿
# sequence_index=[83, 221, 253, 285, 305, 331, 338, 388, 424, 545, 789, 886, 997, 1078, 1112, 1514, 1981, 2055, 2178, 2258, 2291, 2311, 2350, 2378, 2528, 2560, 2620, 2692, 2763, 2950, 3083, 3142, 3324, 3772, 3812, 4232]
# point_x=[-0.5015 ,-0.5556,  1.1556,  0.9818 , 1.1429, -0.5987 , 1.2992,  0.6562,  1.1085,
#  -0.6333 ,-0.1901 , 1.9582, -0.2827 ,-0.6293 , 3.5661 , 1.6211 , 1.4017 ,-0.0473,
#   0.1377 , 0.4769 , 1.6129 ,-0.2333 , 2.1856 , 1.2331 , 2.772 , -0.1962, -0.6477,
#  -0.652 ,  0.9193 , 1.6734 , 1.2631 , 2.4586 , 1.4672, -0.0049 , 0.0784 , 1.4047]
# point_y=[0.4148, 0.4177, 0.1784 ,0.1958, 0.1872, 0.5412, 0.1606 ,0.2129, 0.191 , 0.6612,
#  0.3196, 0.1348, 0.4041, 0.628 , 0.1223 ,0.139 , 0.1511, 0.3163, 0.2434 ,0.223,
#  0.1461, 0.4026, 0.1332, 0.1672, 0.1292 ,0.3616 ,0.691 , 0.7282 ,0.2024 ,0.1367,
#  0.1669 ,0.1323, 0.1487, 0.2913 ,0.2895, 0.1494]
#KNEE[-0.5556, -0.1901, 0.1377, 1.6211] [0.4177, 0.3196, 0.2434, 0.139]
# #第八前沿
# sequence_index=[232, 287, 494, 544, 658, 659, 781, 1090, 1133, 1196, 1524, 1595, 1750, 1777, 1871, 1931, 1962, 1971, 1975, 2160, 2212, 2240, 2301, 2470, 2592, 2680, 2784, 2917, 3299, 3654, 3822, 3954, 3958, 3992, 4079]
# point_x=[-0.1601, -0.6486,  0.0446 ,-0.5428, -0.6224,  0.565 ,  0.4777 ,-0.5646 , 0.6863,
#  -0.5756 , 1.7191 ,-0.6053 ,-0.5429 , 0.162 ,  1.0744 , 0.1072 , 0.4392 ,-0.3645,
#   1.8579,  0.7017,  1.9504 , 1.1586 , 0.6739 , 1.2328  ,0.5983,  0.1866 ,-0.061,
#  -0.1725, -0.2809 , 0.1157 , 1.4291 , 1.6723 , 1.5078 , 3.351,  -0.1726]
# point_y=[0.327  ,0.8808 ,0.3166, 0.4341, 0.6974 ,0.2372, 0.2439, 0.5743 ,0.2263 ,0.6484,
#  0.1398, 0.6894 ,0.5252, 0.284,  0.2012, 0.3115 ,0.2453, 0.4167 ,0.1387 ,0.2139,
#  0.1373, 0.1893, 0.2334 ,0.1807 ,0.236 , 0.2518, 0.3214 ,0.3535, 0.4103 ,0.3044,
#  0.1547, 0.1423, 0.1495, 0.1368 ,0.3746]
#KNEE [-0.6224, -0.5428, -0.1601, 0.1866, 0.7017] [0.6974, 0.4341, 0.327, 0.2518, 0.2139]
# #第九前沿
# sequence_index=[20, 60, 131, 204, 350, 367, 384, 726, 761, 835, 851, 1049, 1063, 1216, 1419, 1448, 1516, 1582, 1831, 1855, 1886, 2333, 2488, 2601, 2615, 2627, 2639, 2782, 2816, 2903, 3064, 3134, 3217, 3371, 3674, 3779, 3870, 3994, 4070, 4144, 4174]
# point_x=[ 0.5132 ,-0.5211 , 0.3341 , 0.8676 , 0.7121, -0.1062,  1.5033 , 0.2553, -0.2481,
#  -0.0468 , 0.455  , 1.2483 , 1.1758 ,-0.2871 ,-0.1645 , 1.4636 , 0.1846,  0.6173,
#  -0.37  ,  1.1855 , 0.701 ,  1.1095 , 1.8002 ,-0.6174 ,-0.5386 , 0.2729 , 0.144,
#   0.3955 , 0.7009 , 1.7426,  1.9953 ,-0.5534 ,-0.3349 , 0.1703 , 0.1004  ,1.8029,
#   0.0657 , 0.8949,  0.6016, -0.0489 , 0.0708]
# point_y=[0.2518, 0.4448, 0.2576, 0.2294, 0.2301, 0.341 , 0.1555 ,0.2846 ,0.4144, 0.332,
#  0.2534, 0.1824, 0.1986 ,0.4248, 0.3658, 0.1567, 0.2904, 0.2433 ,0.4416, 0.1901,
#  0.2395, 0.209,  0.1539 ,0.7162 ,0.4573, 0.2606, 0.3067 ,0.2554, 0.2423 ,0.1546,
#  0.1378, 0.6487, 0.4391 ,0.2985, 0.3166, 0.1404, 0.3247 ,0.2208, 0.2452, 0.3349,
#  0.3209]
#KNEE [-0.5386, -0.5211, -0.0468, 0.2729, 0.701, 0.7121, 1.1855, 1.8029] [0.4573, 0.4448, 0.332, 0.2606, 0.2395, 0.2301, 0.1901, 0.1404]
# #第十前沿
# sequence_index=[86, 149, 174, 179, 444, 471, 701, 734, 1252, 1304, 1318, 1353, 1454, 1575, 1610, 2106, 2143, 2202, 2207, 2218, 2391, 2568, 2675, 2679, 2780, 2876, 3005, 3059, 3095, 3123, 3274, 3330, 3345, 3390, 3457, 3459, 3631, 3765, 3799, 4011, 4245]
# point_x=[-0.4894 , 1.9584 , 1.3027 , 0.1624 , 0.229 ,  0.2802 , 0.048 ,  0.4489, -0.1058,
#   0.2687 , 1.7545 , 0.6844 , 0.2594  ,1.676 ,  1.0082 , 0.3136 ,-0.4045, -0.5386,
#  -0.6035 , 0.0583 , 2.1605 ,-0.1604,  1.2383 ,-0.0719 ,-0.1325 , 1.1926 , 1.4768,
#   0.2998 , 0.5818 , 0.1136 , 1.5947,  0.7002, -0.0574 , 0.8526 , 1.7577 ,-0.211,
#   1.835 ,  0.199,   0.6498 ,-0.461,  -0.3151]
# point_y=[0.511 , 0.142 , 0.1877, 0.3072 ,0.2904, 0.2733, 0.3436, 0.2618, 0.3764, 0.286,
#  0.1575, 0.2509 ,0.2903, 0.1625, 0.2217, 0.265 , 0.4463, 0.5268, 0.8178 ,0.336,
#  0.1394, 0.3888 ,0.1944 ,0.3577, 0.3848 ,0.2092 ,0.1774, 0.2673 ,0.255 , 0.3211,
#  0.1695 ,0.2444, 0.3438, 0.2369 ,0.1557, 0.4206, 0.1471 ,0.3063 ,0.2541, 0.4674,
#  0.4425]
#KNEE [-0.5386, -0.461, -0.0574, 0.2802] [0.5268, 0.4674, 0.3438, 0.2733]
sorted_coords = sorted(zip(point_x, point_y,sequence_index))

# 拆分回两个列表
point_x, point_y,sequence_index = zip(*sorted_coords)




maxx=max(point_x)
index_x=point_x.index(maxx)

maxy=max(point_y)
index_y=point_y.index(maxy)

first_point=[point_x[index_x],point_y[index_x]]
second_point=[point_x[index_y],point_y[index_y]]

x1=point_x[index_x]
y1=point_y[index_x]


def angle_between_three_points(P1, P2, P3):
    """
    计算点 P2 和点 P1、P3 之间的角度

    :param P1: tuple, 第一个点的坐标 (x1, y1)
    :param P2: tuple, 中间点的坐标 (x2, y2)
    :param P3: tuple, 第二个点的坐标 (x3, y3)
    :return: float, 角度的大小（单位：度）
    """
    x1, y1 = P1
    x2, y2 = P2
    x3, y3 = P3

    # 向量 u 和 v
    u = (x1 - x2, y1 - y2)
    v = (x3 - x2, y3 - y2)

    # 计算点积
    dot_product = u[0] * v[0] + u[1] * v[1]

    # 计算向量的模
    magnitude_u = math.sqrt(u[0] ** 2 + u[1] ** 2)
    magnitude_v = math.sqrt(v[0] ** 2 + v[1] ** 2)

    # 计算余弦值
    cos_theta = dot_product / (magnitude_u * magnitude_v)

    # 计算角度（弧度）
    angle_radians = math.acos(cos_theta)

    # 将角度转换为度
    angle_degrees = math.degrees(angle_radians)

    return angle_degrees

def is_point_left_of_line(P1, P2, P):
    """
    判断点 P 是否在由 P1 和 P2 确定的直线的左侧。

    :param P1: tuple, 点 P1 的坐标 (x1, y1)
    :param P2: tuple, 点 P2 的坐标 (x2, y2)
    :param P: tuple, 点 P 的坐标 (x, y)
    :return: bool, 如果点 P 在直线的左侧返回 True，否则返回 False
    """
    x1, y1 = P1
    x2, y2 = P2
    x, y = P

    # 计算向量 v1 和 v2
    v1 = (x2 - x1, y2 - y1)
    v2 = (x - x1, y - y1)

    # 计算叉积
    cross_product = v1[0] * v2[1] - v1[1] * v2[0]

    return cross_product


dis_list=[]
angle_list=[]
knee_x=[]
knee_y=[]
sequence_list=[]
for i in range(len(point_x)):
 if i != 0 and i != len(point_x) - 1:
     point=[point_x[i],point_y[i]]
     dist=is_point_left_of_line([point_x[i-1],point_y[i-1]],[point_x[i+1],point_y[i+1]],point)
     angle=angle_between_three_points([point_x[i-1],point_y[i-1]],point,[point_x[i+1],point_y[i+1]])
     dis_list.append(dist)
     angle_list.append(angle)

 else:
     dis_list.append(0)
     angle_list.append(180)
print(dis_list)
print(angle_list)
for i in range(len(dis_list)):
 if dis_list[i]<0 and angle_list[i]<170:
   knee_x.append(point_x[i])
   knee_y.append(point_y[i])
   sequence_list.append(sequence_index[i])



print(knee_x)
print(knee_y)
print(sequence_list)

plt.scatter(point_x,point_y,c=(244 / 256, 81 / 256, 96 / 256),label='Tenth Front',s=80)
plt.scatter(knee_x, knee_y, c='green', label='Knee Points', s=80)
# plt.scatter(knee_x[0], knee_y[0], c=(244 / 256, 81 / 256, 96 / 256),  s=80)
# plt.scatter(knee_x[2], knee_y[2], c=(244 / 256, 81 / 256, 96 / 256),  s=80)
# plt.scatter(first_point[0],first_point[1],c='orange',label='First Points',s=80)
# plt.scatter(second_point[0],second_point[1],c='orange',label='Second Points',s=80)

plt.xticks(fontsize=14)
plt.yticks(fontsize=14)

plt.xlim(-1.5,3)
plt.ylim(0,1)
plt.legend(fontsize=16)
plt.xlabel('D1_(mic)',fontsize=14)



# 设置Y轴标签
plt.ylabel('D2_(hemo)',fontsize=14)
plt.rcParams['savefig.dpi'] = 300
plt.savefig('knee_point-10.png',dpi=300)
plt.show()