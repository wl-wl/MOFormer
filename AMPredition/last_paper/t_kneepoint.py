"""
代码中，我们使用了scikit-learn库中的KMeans聚类算法，将前沿数据分为若干个聚类。
然后，对于每个聚类，计算其中心点与其最近的数据点的距离，将这些距离从小到大排序，
选取前k个距离最大的点作为Knee Point。在实际应用中，您可以根据具体情况调整参数，
例如聚类数量、选取的Knee Point数量等。
在Hypervolume(hso)求解到的前沿中，Knee Point是指前沿曲线上的一个拐点，通常表示为前沿曲线上的一个局部最优解。

求解Knee Point的方法有很多种，以下是一些常用的方法：

基于距离的方法：该方法基于前沿曲线上每个点与前沿曲线两端点的距离，计算每个点的拐率。当拐率达到最大值时，即可判定该点为Knee Point。

基于密度的方法：该方法基于前沿曲线上每个点周围的点密度，计算每个点的密度与距离的乘积。当该值达到最大值时，即可判定该点为Knee Point。

基于聚类的方法：该方法基于前沿曲线上每个点周围的点聚类情况，将前沿曲线分为若干个聚类，找到聚类之间的转折点即为Knee Point。

以上方法都是基于前沿曲线上的点进行计算，可以根据实际情况选择合适的方法来求解Knee Point。如果您有其他问题，欢迎继续提问哦。

"""

from sklearn.cluster import KMeans
import numpy as np
import matplotlib.pyplot as plt
from kneed import DataGenerator, KneeLocator
# 假设前沿数据存储在frontier中，每个点有两个目标函数值
#基于距离的方法
points=[]
# #第一前沿
sequence_index=[320, 338, 377, 1235, 3064, 3118, 3217, 3439, 3759]
point_x=[-0.7106 ,-0.048 , -1.0898 ,-0.8812 ,-0.8544 ,-0.8158 , 0.0825, -0.8682 ,-0.0997]
point_y=[0.132,  0.0931 ,0.3234, 0.3221 ,0.3014 ,0.2765 ,0.0547, 0.3132 ,0.1232]
#
# #第二前沿
sequence_index=[744, 1236, 1706, 1901, 2339, 2349, 2569, 2948, 3088, 3328, 3638]
point_x=[-1.022,  -0.6884, -0.6971, -0.6825, -0.4543,  0.3064, -0.4051,  0.1788, -1.0817,
 -0.7828, -0.4337]
point_y=[0.3344 ,0.2422 ,0.2878, 0.1804, 0.1571, 0.0739 ,0.1328, 0.0932, 0.6139, 0.289,
 0.1464]
# # #第三前沿
sequence_index=[45, 644, 680, 1010, 1188, 1284, 2187, 2460, 2629, 2780, 2823, 2968, 3070, 3257, 3522, 3788, 3899, 3956]
point_x=[-0.3241, -0.439 , -0.4218, -0.8465, -0.7768, -0.1636, -0.5788, -0.6742, -0.8966,
  0.1106 , 0.1905,  0.3146, -0.8343 , 0.8471, -0.9805 ,-0.7674 ,-0.6366 ,-0.7063]
point_y=[0.1657 ,0.1711, 0.1707, 0.3914, 0.3571, 0.1495, 0.1856 ,0.2781, 0.4028 ,0.139,
 0.0985 ,0.095  ,0.3579 ,0.0789 ,0.447,  0.3251 ,0.2621 ,0.3003]
#
#
# # # #第四前沿
sequence_index=[92, 136, 289, 505, 660, 990, 1057, 1233, 1234, 1355, 1509, 1565, 1681, 1847, 2152, 2261, 2975, 3017, 3053, 3172, 3267, 3289, 3369, 3408, 3523, 3540, 3547, 3634, 3702, 3793, 3924, 4035]
point_x=[-0.5765, -0.6042 ,-0.8457 , 1.2415, -0.7328 , 0.283,  -0.6496 , 0.1537, -0.762,
 -0.8629 ,-0.0149 ,-0.7677, -0.5612 ,-0.6284 ,-0.8854, -0.8403  ,1.0922, -0.2546,
  0.1535 ,-0.6873 ,-0.0518 , 0.2306, -0.6393 ,-0.7444 , 0.4076 , 0.0785 , 0.3372,
 -0.1413 , 0.3464 , 0.2743 ,-0.2555 ,-0.4849]
point_y=[0.2471, 0.2996 ,0.465,  0.0807, 0.3283, 0.1299, 0.3167, 0.1488 ,0.3712, 0.4697,
 0.1626 ,0.3908, 0.2072, 0.3086, 0.4835 ,0.4574 ,0.083 , 0.1732, 0.1535, 0.32,
 0.1636 ,0.1391 ,0.3126, 0.3352, 0.0963 ,0.1538 ,0.1151 ,0.1645 ,0.1081, 0.1384,
 0.1826, 0.186 ]
#
# # print(len(sequence_index),len(point_x),len(point_y))
# # #第五前沿
sequence_index=[56, 70, 291, 324, 354, 1357, 1611, 1641, 1814, 2223, 2426, 2574, 2622, 2636, 2745, 2804, 2944, 2971, 3083, 3091, 3177, 3468, 3555, 3670, 3710, 4078, 4100]

point_x=[ 0.307 , -0.8412 ,-0.5312, -0.7352 ,-0.3678 , 0.8152 , 0.2456 , 0.2807 ,-0.6551,
 -0.4651 ,-0.5238, -0.1589, -0.6714 ,-0.0704 ,-0.7507  ,0.0826 , 0.3861 ,-0.7891,
 -0.5075 , 0.4574 , 2.1078, -0.6801 ,-0.6924 , 1.1339 ,-0.5781, -0.3578, -0.7172]
point_y=[0.1318, 0.4845, 0.2576, 0.3898, 0.1956, 0.1071, 0.1447, 0.141 , 0.3271, 0.1973,
 0.2447, 0.1768, 0.3529, 0.1691, 0.4626 ,0.1554 ,0.1169 ,0.4808, 0.2371 ,0.1102,
 0.084 , 0.366 , 0.3769 ,0.0976 ,0.3146, 0.1918, 0.3775]

#第六前沿
sequence_index=[43, 125, 378, 417, 500, 676, 733, 767, 989, 1389, 1398, 1482, 1630, 1893, 1974, 2170, 2335, 2355, 2684, 2726, 3421, 3445, 3676, 3705, 3742, 3855]
point_x=[-0.5548 , 0.8631, -0.378,  -0.5245, -0.1298 , 0.4001,  0.3625,  0.032,  -0.7304,
  0.246,  -0.7693, -0.4633 , 0.9357 ,-0.0733 ,-0.6284 , 0.3158 , 1.4087 ,-0.5696,
 -0.5436 , 0.1232 ,-0.4886, -0.6998, -0.823 , -0.2645 ,-0.3665 ,-0.6635]
point_y=[0.3367, 0.115 , 0.2066 ,0.297,  0.1874 ,0.1253 ,0.1446 ,0.17 ,  0.4146, 0.1552,
 0.4884 ,0.2097 ,0.1095, 0.1799, 0.3545, 0.1453, 0.1017 ,0.3378 ,0.3327, 0.1578,
 0.2869 ,0.3971, 0.5684 ,0.2017, 0.2065, 0.371 ]

#第七前沿
sequence_index=[78, 84, 86, 199, 616, 815, 961, 1038, 1185, 1450, 1593, 1776, 1777, 1801, 1822, 1877, 2065, 2276, 2325, 2402, 2581, 2840, 2895, 2963, 2991, 3184, 3317, 3531]
point_x=[-0.3629 , 1.5549 ,-0.7402,  0.1304, -0.5096, -0.3281  ,1.0752, -0.0649, -0.7455,
 -0.4545 ,-0.0418 , 0.3638 ,-0.5871, -0.6629 , 0.4278 , 1.006  ,-0.7916  ,0.1801,
 -0.6632, -0.484  , 0.1819 ,-0.4435,  0.2048 ,-0.2264, -0.7233, -0.5711 , 0.5352,
 -0.5349]
point_y=[0.2165, 0.1159 ,0.5208, 0.1741, 0.3133, 0.2083, 0.1188, 0.1936, 0.5622, 0.2555,
 0.187  ,0.1603, 0.362,  0.3742, 0.1281, 0.1207, 0.5916 ,0.1729 ,0.3904, 0.2899,
 0.1653, 0.2322, 0.1618, 0.2042, 0.4198 ,0.3581, 0.1266, 0.3338]

#第八前沿
sequence_index=[36, 559, 739, 776, 1005, 1027, 1069, 1070, 1420, 1455, 1570, 1690, 1817, 1853, 1868, 1870, 2075, 2155, 2882, 3135, 3160, 3242, 3376, 3548, 3785, 3913, 4044, 4046, 4066]
point_x=[-0.5481 , 0.4916 ,-0.0894, -0.7138, -0.3617 ,-0.0238, -0.4434, -0.6493,  0.4461,
 -0.1899 , 0.2127 ,-0.7188,  1.1448,  0.2462 ,-0.7061, -0.529 ,  0.0399 , 3.0996,
  1.005 ,  0.46,   -0.582 , -0.5445, -0.1427 , 0.4271, -0.4524, -0.6584, -0.7123,
 -0.0978 , 0.1071]
point_y=[0.3666, 0.1295 ,0.2144, 0.4891, 0.2282, 0.2069 ,0.2399, 0.3797, 0.1676 ,0.2227,
 0.1832 ,0.5364, 0.1188 ,0.1745 ,0.4411, 0.3357 ,0.1989, 0.1182 ,0.1286 ,0.1333,
 0.3673, 0.366 , 0.2185, 0.1728, 0.2862, 0.3878 ,0.4526 ,0.216 , 0.1964]


#第九前沿
sequence_index=[26, 50, 205, 452, 462, 468, 471, 485, 944, 1156, 1498, 1572, 1764, 1789, 1916, 2018, 2081, 2490, 2606, 2731, 2990, 3372, 3382, 3576, 3903]
point_x=[ 0.2638, -0.1021, -0.6573 ,-0.7115, -0.5121, -0.165,  -0.4516,  0.0251  ,0.3246,
  1.2868  ,0.5399 , 1.5622 , 1.4893, -0.4079, -0.2133, -0.3457 ,-0.6621,  0.8615,
 -0.3954 , 0.0514, -0.6406 ,-0.4365, -0.4319, -0.5446, -0.714 ]
point_y=[0.1808, 0.228  ,0.3936 ,0.4736, 0.3377, 0.2282, 0.2996 ,0.2146, 0.1767 ,0.1288,
 0.1307, 0.1193, 0.1199, 0.2492, 0.2318 ,0.2373 ,0.4503 ,0.1295, 0.2422, 0.2022,
 0.3861 ,0.2628, 0.2621, 0.3668, 0.6463]


#第十前沿
sequence_index=[100, 237, 239, 401, 508, 552, 794, 797, 800, 877, 1119, 1133, 1601, 1745, 1911, 1954, 1990, 2218, 2461, 2552, 2671, 2761, 2866, 2993, 3104, 3284, 3374, 3648, 3733, 3772, 3778, 3985, 4057, 4081]
point_x=[-0.6409, -0.5052,  1.241,  -0.6903, -0.4413,  0.2783 ,-0.4643 ,-0.6628, -0.4473,
 -0.0787, -0.65 ,   0.7196 , 0.4482, -0.4642 ,-0.4328,  0.563 ,  0.0431, -0.385,
 -0.6343 ,-0.4072, -0.5008 , 0.04 ,  -0.5388 ,-0.4362,  0.9413 , 0.0713 , 0.1942,
  0.5399, -0.2906, -0.4305, -0.2128,  0.5815 , 0.6631, -0.3883]
point_y=[0.461 , 0.3686 ,0.1298, 0.515,  0.3086, 0.1854, 0.3446, 0.4744, 0.3381, 0.2315,
 0.4651 ,0.1349 ,0.1848, 0.3422, 0.2877, 0.1758 ,0.2186, 0.2558, 0.3872 ,0.2722,
 0.3453 ,0.2193 ,0.3769 ,0.2997, 0.1301, 0.2069 ,0.2025 ,0.18 ,  0.2504, 0.2798,
 0.2354 ,0.1641 ,0.1558 ,0.2657]

kneedle2 = KneeLocator(point_x, point_y, curve='convex', direction='increasing', interp_method='interp1d')
# kneedle2 = KneeLocator(point_x, point_y, curve='convex', direction='decreasing', interp_method='interp1d')
kneedle2 = KneeLocator(point_x, point_y, curve='concave', direction='decreasing', interp_method='interp1d')
# kneedle2 = KneeLocator(point_x, point_y, curve='concave', direction='increasing', interp_method='interp1d')

# print('-----------',kneedle.all_knees)
# print(round(kneedle.knee, 3))
# print(round(kneedle.knee_y, 3))

for i in range(len(sequence_index)):
    points.append([point_x[i],point_y[i]])
points=np.array(points)
x=point_x
y=point_y

# print(points)
# 计算每个前沿点到前沿曲线两端点的距离
start_point = points[0]
end_point = points[-1]
distances = np.zeros(len(points))
for i in range(len(points)):
    distances[i] = np.linalg.norm(points[i] - start_point) + np.linalg.norm(points[i] - end_point)
# 计算每个点的拐率
curvatures = np.zeros(len(points))
for i in range(1, len(points) - 1):
    curvature = abs((points[i+1][1] - points[i][1])*(points[i][0] - points[i-1][0]) - (points[i][1] - points[i-1][1])*(points[i+1][0] - points[i][0])) / ((points[i+1][1] - points[i][1])**2 + (points[i+1][0] - points[i][0])**2)**1.5
    curvatures[i] = curvature
# 找到拐率最大的点作为拐点
print(curvatures)
curvatures=curvatures.tolist()
curvatures_copy=curvatures[:]
#求拐点
print(max(curvatures))
first_index=curvatures.index(max(curvatures))
first=curvatures[first_index]
# print(first,points[curvatures_copy.index(first)])
max_point=points[curvatures_copy.index(first)]

max_point=[kneedle2.knee,kneedle2.knee_y]
print('拐点:',max_point)


# 计算第一个点与其他点之间的距离
distances = np.zeros(len(points))
for i in range(len(points)):
    distances[i] = np.linalg.norm(np.array(max_point) - np.array(points[i]))
distances_copy=distances[:]
distances=sorted(distances)
print('第一接近距离',distances_copy[distances_copy.tolist().index(distances[1])])
print('第二接近距离',distances_copy[distances_copy.tolist().index(distances[2])])

second=points[distances_copy.tolist().index(distances[1])]
third=points[distances_copy.tolist().index(distances[2])]
print('三个点的坐标：',max_point,second,third)

print('所在序列坐标：')
print(sequence_index[curvatures_copy.index(first)])
print(sequence_index[distances_copy.tolist().index(distances[1])])
print(sequence_index[distances_copy.tolist().index(distances[2])])



plt.scatter(x,y,c=(244 / 256, 81 / 256, 96 / 256),label='Sixth Front',s=80)
# plt.scatter(kneedle1.knee,kneedle1.knee_y,c='orange',label='Knee Points',s=100)
plt.scatter(kneedle2.knee,kneedle2.knee_y,c='green',label='Knee Points',s=80)
# plt.scatter(kneedle3.knee,kneedle3.knee_y,c='orange',label='Knee Points',s=100)
# plt.scatter(kneedle4.knee,kneedle4.knee_y,c='orange',label='Knee Points',s=100)
# plt.scatter(max_point[0],max_point[1],c='orange',label='Knee Points',s=100)
plt.scatter(second[0],second[1],c='orange',s=80)
plt.scatter(third[0],third[1],c='orange',s=80)

plt.xlim(-1.5,3)
plt.ylim(0,1)
plt.legend(fontsize=16)
plt.xlabel('D1_(mic)')

# 设置Y轴标签
plt.ylabel('D2_(toxicity)')
plt.rcParams['savefig.dpi'] = 300
# plt.savefig('/tmp/pycharm_project_177/knee_point-h-5.png')
plt.show()

#
